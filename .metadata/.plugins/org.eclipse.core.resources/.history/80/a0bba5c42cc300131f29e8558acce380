package com.kimt.droidfestation.gameworld;

import com.badlogic.gdx.math.Intersector;
import com.kimt.droidfestation.gameobjects.Blocks;
import com.kimt.droidfestation.gameobjects.Shape;

public class GameWorld {

	private Blocks blocks;
	private Shape s;
	private int score = 0;
	private int midPointY;
	private GameRenderer renderer;
	private int x, y, c;
	

	public GameWorld(int midPointY) {
		this.midPointY = midPointY;
		s = new Shape();
		blocks = new Blocks(x, y, c, s);
	}

	public void update(float delta) {
		runTime += delta;

		switch (currentState) {
		case READY:
		case RUNNING:
			updateRunning(delta);
			break;
		default:
			break;
		}
	}

	public void updateRunning(float delta) {
		if (delta > .15f) {
			delta = .15f;
		}

		bird.update(delta);
		scroller.update(delta);

		if (scroller.collides(bird) && bird.isAlive()) {
			scroller.stop();
			bird.die();
			AssetLoader.dead.play();
			renderer.prepareTransition(255, 255, 255, .3f);

			AssetLoader.fall.play();
		}

		if (Intersector.overlaps(bird.getBoundingCircle(), ground)) {

			if (bird.isAlive()) {
				AssetLoader.dead.play();
				renderer.prepareTransition(255, 255, 255, .3f);

				bird.die();
			}

			scroller.stop();
			bird.decelerate();
			currentState = GameState.GAMEOVER;

			if (score > AssetLoader.getHighScore()) {
				AssetLoader.setHighScore(score);
				currentState = GameState.HIGHSCORE;
			}
		}
	}

	public Shape getShape() {
		return getShape;
	}

	public int getMidPointY() {
		return midPointY;
	}

	public int getScore() {
		return score;
	}

	public void addScore(int increment) {
		score += increment;
	}

	public void start() {
		currentState = GameState.RUNNING;
	}

	public void ready() {
		currentState = GameState.READY;
		renderer.prepareTransition(0, 0, 0, 1f);
	}

	public void restart() {
		score = 0;
		shape.onRestart(midPointY - 5);
		blocks.onRestart();
		ready();
	}

	public boolean isReady() {
		return currentState == GameState.READY;
	}

	public boolean isGameOver() {
		return currentState == GameState.GAMEOVER;
	}

	public boolean isHighScore() {
		return currentState == GameState.HIGHSCORE;
	}

	public boolean isMenu() {
		return currentState == GameState.MENU;
	}

	public boolean isRunning() {
		return currentState == GameState.RUNNING;
	}

	public void setRenderer(GameRenderer renderer) {
		this.renderer = renderer;
	}

}
