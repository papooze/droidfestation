package com.kimt.droidfestation.dfhelpers;

import java.util.ArrayList;
import com.kimt.droidfestation.gameobjects.Shape;

public class ShapeManager {
	ArrayList<Shape> shapes = new ArrayList<Shape>();

	public ShapeManager() {

	}

	public void addShape() {
		shapes.add(new Shape());
	}

	public ArrayList<Shape> getShapes() {
		return shapes;
	}

	public boolean delShape(Shape s) {
		return shapes.remove(s);
	}

	public void UpdateX() {
		// redraw blocks
	}

	public void UpdateY() {
		for (int i = shapes.size(); i > 0; i--) {
			for (int j = 0; j <= 3; j++) {
				shapes.get(i).getBlocks()[j].setX(
						shapes.get(i).getBlocks()[j].getX() + 1, j);
			}
		}
	}

	public boolean DetectCollision(Shape s) {
		for (int i = shapes.size(); i > 0; i--) {
			if (shapes.indexOf(s) == i)
				i--;
			for (int j = 0; j <= 3; j++) {
				for (int k = 0; k <= 3; k++) {
					if (shapes.get(i).getBlocks()[j].getX() == s.getBlocks()[k]
							.getX()
							&& shapes.get(i).getBlocks()[j].getY() == s
									.getBlocks()[k].getY())
						return false;
				}
			}
		}
		return false;
	}

}
